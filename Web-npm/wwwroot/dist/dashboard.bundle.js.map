{"version":3,"file":"dashboard.bundle.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,2BAA2B;AAC3B,gCAAgC;AAChC;AACA,aAAa;AACb;AACA;AACA,2BAA2B;AAC3B;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;AACD","sources":["webpack://iot/./Pages/index.js"],"sourcesContent":["ï»¿var timeout = null;\r\nvar app = vueContext({\r\n    el: \"#app\",\r\n    components: {\r\n        'c-check-box': compCheckbox\r\n    },\r\n\r\n    data: function () {\r\n        return {\r\n            filter: {\r\n                Name: \"\",\r\n                OrderByDirection: \"Asc\",\r\n                OrderBy: 2,\r\n                ItemsPerPage: 50,\r\n                CurrentPage: 1,\r\n                TotalPages: 150,\r\n                Loading: false\r\n            },\r\n            loadingCategories: false,\r\n            loadingPaymentsOverview: false,\r\n            sums: {\r\n                Incomes: {},\r\n                Expenditures: {},\r\n                Savings: {}\r\n            },\r\n            categories: [],\r\n            paymentsOverview: {\r\n                Incomes: {},\r\n                Expenditures: {}\r\n            },\r\n            overviewChart: null\r\n        }\r\n\r\n    },\r\n    watch: {\r\n        'filter.Name': function () {\r\n            this.filterChagnedDelayed();\r\n        },\r\n        'PaymentTotalDetails.Date': function () {\r\n            console.log(this.PaymentTotalDetails.Date);\r\n        }\r\n    },\r\n    computed: {\r\n        monthlyExpectedExpenditures: function () {\r\n            const formatter = new Intl.NumberFormat('fr-FR', {\r\n                style: 'currency',\r\n                currency: 'NOK',\r\n            });\r\n            if (this.categories.length > 0)\r\n                return formatter.format(this.categories.filter(x => x.Name != \"Saving\").map(x => x.MonthlyLimit).reduce((particalSum, a) => particalSum + a, 0));\r\n            else return 0;\r\n        }\r\n    },\r\n    methods: {\r\n        getList: function () {\r\n            if (this.filter.Loading) return;\r\n            this.filter.Loading = true;\r\n            return apiHandler.Get(\"paymentTotal\", this.filter).then(response => {\r\n                this.items = response.Items;\r\n                this.filter.TotalPages = response.TotalPages;\r\n                this.filter.Loading = false;\r\n            });\r\n        },\r\n        getPaymentsSum: function () {\r\n            var today = new Date();\r\n            var lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);\r\n            var test1 = today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + 1;\r\n            var test2 = today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + lastDayOfMonth.getDate();\r\n            var req = {\r\n                DateFrom: test1,\r\n                DateTo: test2,\r\n            }\r\n            apiHandler.Get(\"reports/paymentssum\", req).then(response => {\r\n                this.sums = response;\r\n            })\r\n        },\r\n        getCategories: function () {\r\n            this.loadingCategories = true;\r\n            var req = { HasMonthlyLimit: true }\r\n            return apiHandler.Get(\"category/lookup\", req).then(response => {\r\n                this.categories = response;\r\n                this.loadingCategories = false;\r\n            });\r\n        },\r\n        getPaymentsOverview: function () {\r\n            if (this.loadingPaymentsOverview) return\r\n            this.loadingPaymentsOverview = true;\r\n\r\n            var today = new Date();\r\n            var req = {\r\n                IsDeposit: true,\r\n                Date: today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + 1\r\n            };\r\n            apiHandler.Get(\"reports/paymentsoverview\", req).then(response => {\r\n                this.paymentsOverview.Incomes = response;\r\n            }).then(response2 => {\r\n                req.IsDeposit = false;\r\n                return apiHandler.Get(\"reports/paymentsoverview\", req).then(response3 => {\r\n                    this.paymentsOverview.Expenditures = response3;\r\n                    this.loadingPaymentsOverview = false;\r\n                    this.loadOverviewChart();\r\n                });\r\n            })\r\n        },\r\n        loadOverviewChart: function () {\r\n            let incomes = this.paymentsOverview.Incomes.map(x => x.Price)\r\n            let expenditures = this.paymentsOverview.Expenditures.map(x => x.Price)\r\n            let data = {\r\n                labels: this.paymentsOverview.Incomes.map(x => x.MonthFormatted),\r\n                datasets: [\r\n                    {\r\n                        label: 'Expenditure',\r\n                        data: expenditures,\r\n                        borderColor: 'rgba(255, 99, 132, 1)',\r\n                        backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n                        borderWidth: 2,\r\n                        borderSkipped: false,\r\n                    },\r\n                    {\r\n                        label: 'incomes',\r\n                        data: incomes,\r\n                        borderColor: 'rgba(100, 99, 255, 1)',\r\n                        backgroundColor: 'rgba(100, 99, 255, 0.2)',\r\n                        borderWidth: 2,\r\n                        borderSkipped: false,\r\n                    }],\r\n            };\r\n\r\n            let config = {\r\n                type: 'bar',\r\n                data: data,\r\n                options: {\r\n                    responsive: true,\r\n                    plugins: {\r\n                        legend: {\r\n                            position: 'top',\r\n                        },\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Overview'\r\n                        }\r\n                    }\r\n                },\r\n            };\r\n\r\n            var ctx = $(\"#overviewChart\");\r\n            if (this.overviewChart) this.overviewChart.destroy();\r\n            this.overviewChart = new Chart(ctx, config);\r\n        },\r\n        filterChanged: function () {\r\n            this.filter.CurrentPage = 1;\r\n            this.getList();\r\n        },\r\n        filterChagnedDelayed: function () {\r\n            clearTimeout(timeout);\r\n            timeout = setTimeout(() => {\r\n                this.filterChanged();\r\n            }, 200);\r\n        }\r\n    },\r\n    created: function () {\r\n        this.getList();\r\n        this.getPaymentsSum();\r\n        this.getCategories();\r\n        this.getPaymentsOverview();\r\n    },\r\n    mounted: function () {\r\n        $(\"#datepickere\").datepicker();\r\n    }\r\n})\r\n\r\n"],"names":[],"sourceRoot":""}