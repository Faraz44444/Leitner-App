using Domain.Model.BaseModels;
using System;
using System.Collections.Generic;

namespace Domain.Model.User
{
    public class UserModel : PagedBaseModel
    {
        [IsTableColumn(true)]
        public long UserId { get; set; }
        [IsTableColumn(true)]
        public string Username { get; set; }
        [IsTableColumn(true)]
        public string Email { get; set; }
        [IsTableColumn(true)]
        public string FirstName { get; set; }
        [IsTableColumn(true)]
        public string LastName { get; set; }
        [IsTableColumn(true)]
        public DateTime? LastLoginAt { get; set; }
        [IsTableColumn(true)]
        public bool IsSystemUser { get; set; }
        [IsTableColumn(true)]
        public long CurrentClientId { get; set; }
        [IsTableColumn(true)]
        public DateTime LastUpdateAt { get; set; }
        [IsTableColumn(true)]
        public string PasswordSalt { get; set; }
        [IsTableColumn(true)]
        public string PasswordHash { get; set; }
        [IsTableColumn(true)]
        public DateTime? PasswordLastSetAt { get; set; }
        [IsTableColumn(true)]
        public bool PasswordIsAutogenerated { get; set; }
        [IsTableColumn(true)]
        public string PasswordResetToken { get; set; }
        [IsTableColumn(true)]
        public DateTime? PasswordResetTokenGeneratedAt { get; set; }
        public UserModel() { }

        public UserModel(string username,
                         string firstName,
                         string lastName,
                         long createdByUserId,
                         string createdByFirstName,
                         string createdByLastName,
                         string email = "",
                         long currentClientId = 0,
                         bool isSystemUser = false)
        {
            Username = username;
            FirstName = firstName;
            LastName = lastName;
            IsSystemUser = isSystemUser;

            CreatedAt = DateTime.Now;
            CreatedByUserId = createdByUserId;
            CreatedByFirstName = createdByFirstName;
            CreatedByLastName = createdByLastName;

            Email = email;
            CurrentClientId = currentClientId;
        }

        public new void Validate()
        {
            if (Username.Empty()) throw new ArgumentException("Username is not set");
            if (FirstName.Empty()) throw new ArgumentException("FirstName is not set");
            if (LastName.Empty()) throw new ArgumentException("LastName is not set");
            if (CreatedAt == DateTime.MinValue) throw new ArgumentException("CreatedAt is not set");

        }

        public string CurrentClientName { get; set; }
        public string FullName => $"{string.Join(" ", new List<string> { FirstName, LastName })}";
    }
}
